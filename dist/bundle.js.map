{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src2/index.ts","webpack:///./src2/helpers/Query.ts","webpack:///./src2/helpers/Mutation.ts","webpack:///./src2/helpers/Fragment.ts","webpack:///./src2/utils/RegEx.ts"],"names":["root","factory","exports","module","define","amd","a","i","global","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Query_1","Mutation_1","Fragment_1","RegEx_1","DataCollection","this","_collection","collection","query","mutation","fragment","change","gmainql","Base","_super","GmainQL","_this","apply","arguments","resolveArguments","args","callbackSuccess","length","RegExOprValid","test","console","warn","resolveOptionName","option","collectionLength","optionName","x","indexOf","resultOperation","match","RegExName","resolveVariable","preSort","RegExVariable","variableEnd","variableSort","slice","sort","push","resolveFragmentName","resultFragment","fragmentPos","onPos","fragmentName","Error","comprobeVariablesPreSend","ListVariables","QueryVariables","RegistryFragments","fragments","RegExFragments","replace","addFragment","fragmentArray","virtual_fragment","OprVariables","addQuery","map","frag","fragment_query","checkFragmentVariable","variables","fVariables","__extends","WithGmainQL","default","Compose","compose","name_1","operationName","e","error","templateObject_1","__makeTemplateObject","templateObject_2","templateObject_3","templateObject_4","log","AllUsers","orderByUser","orderByPost","orderByComment","Query","_i","keys","__assign","Mutation","Fragment"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import WithQuery from './helpers/Query';\nimport WithMutation from './helpers/Mutation';\nimport WithFragment from './helpers/Fragment';\nimport { CollectionModel, ComposeModel, ComposeEndModel, ObjectSimpleModel } from './models';\nimport Constructor from './utils/Constructor';\nimport {\n    RegExOprValid,\n    RegExName,\n    RegExVariable,\n    RegExFragments\n} from './utils/RegEx';\n\nclass DataCollection {\n    protected _collection: CollectionModel = {} as any;\n    constructor () {\n        this.collection.query = {};\n        this.collection.mutation = {};\n        this.collection.fragment = {};\n    }\n    get collection (): CollectionModel {\n        return this._collection;\n    }\n    set collection (change: CollectionModel) {\n        this._collection = change;\n    }\n}\n\nconst WithCompose = <TBase extends Constructor> (Base: TBase) =>\n    class Compose extends Base {\n        protected comprobeVariablesPreSend: Function;\n        protected RegistryFragments: Function;\n        protected addFragment: Function;\n        protected compose = (object: ComposeModel): Function =>\n            (QueryVariables: Object = {}): ComposeEndModel => {\n                try {\n                    let addQuery: string = '\\n';\n                    let {\n                        name,\n                        query,\n                        fragments,\n                        variables\n                    }: ComposeModel = object;\n                    this.comprobeVariablesPreSend(variables, QueryVariables);\n                    addQuery = this.addFragment(fragments, [], variables, addQuery);\n                    return {\n                        operationName: name,\n                        query: query + addQuery,\n                        variables: QueryVariables\n                    };\n                } catch(e) {\n                    console.error(e);\n                }\n            }\n    }\n\nconst WithGmainQL = <TBase extends Constructor> (Base: TBase) =>\n    class GmainQL extends Base {\n        public collection: CollectionModel;\n        protected resolveArguments = (\n            args: any[],\n            callbackSuccess: Function\n        ): void => {\n            let query: string = args[0];\n            if (query.length) {\n                if ( RegExOprValid.test(query) ) {\n                    callbackSuccess(query[0]);\n                } else {\n                    console.warn('Check the syntax of the query the graphql.');\n                }\n            }\n        }\n        protected resolveOptionName = (\n            query: string,\n            option: string,\n            collectionLength: number\n        ): string => {\n            let queryPos: number = query.indexOf(option);\n            let optionName: string = '';\n            for (let x=(queryPos + (option.length + 1)); (query[x] !== '('); x++) {\n                optionName += query[x];\n            }\n            let resultOperation = optionName.match(RegExName);\n            return (resultOperation) ? resultOperation[0] : `anonymous_${collectionLength}`;\n        }\n        protected resolveVariable = (query: string): string[] => {\n            let preSort: RegExpMatchArray = query.match(RegExVariable);\n            let variableEnd: string[] = [];\n            if (preSort) {\n                let variableSort: string[] = preSort.slice().sort();\n                for (var i=0; i<variableSort.length; i++) {\n                    if (variableEnd.indexOf(variableSort[i]) === -1) {\n                        variableEnd.push(variableSort[i]);\n                    }\n                }\n            }\n            return variableEnd;\n        }\n        protected resolveFragmentName = (fragment: string): string => {\n            let fragmentPos: number = fragment.indexOf('fragment');\n            let onPos: number = fragment.indexOf('on');\n            let fragmentName: string = '';\n            let resultFragment: RegExpMatchArray = [];\n            for (let x=(fragmentPos + 9); x<onPos; x++) {\n                fragmentName += fragment[x];\n            }\n            resultFragment = fragmentName.match(RegExName);\n            if (!resultFragment) {\n                throw new Error('Fragment of be have a name.');\n            }\n            return (resultFragment) ? resultFragment[0] : null;\n        }\n        protected comprobeVariablesPreSend = (\n            ListVariables: string,\n            QueryVariables: Object\n        ): void => {\n            for(let key in QueryVariables) {\n                if (ListVariables.indexOf(`$${key}`) === -1) {\n                    throw new Error(`missing assign variables.`);\n                }\n            }\n        }\n        protected RegistryFragments = (query: string): string[] => {\n            let fragments: RegExpMatchArray = query.match(RegExFragments) || [];\n            for(var i=0; i<fragments.length; i++) {\n                fragments[i] = fragments[i].replace(/[.]/g, '');\n            }\n            return fragments;\n        }\n        protected addFragment = (\n            fragmentArray: string[],\n            virtual_fragment: string[],\n            OprVariables: string[],\n            addQuery: string = ''\n        ): string => {\n            let { fragment } = this.collection;\n            fragmentArray.map(frag => {\n                if (virtual_fragment.indexOf(frag) === -1) {\n                    let fragment_query: string = fragment[frag].query;\n                    virtual_fragment.push(frag);\n                    addQuery += fragment_query + '\\n';\n                    this.checkFragmentVariable(fragment[frag].variables, OprVariables);\n                    if (fragment[frag].fragments.length) {\n                        this.addFragment(\n                            fragment[frag].fragments,\n                            virtual_fragment,\n                            OprVariables,\n                            addQuery\n                        );\n                    }\n                }\n            });\n            return addQuery;\n        }\n        protected checkFragmentVariable = (\n            fVariables: string[],\n            OprVariables: string[]\n        ): void => {\n            for (let x=0; x<fVariables.length; x++) {\n                if (OprVariables.indexOf(fVariables[x]) === -1) {\n                    throw new Error(`fragment variables do not match. ~> ${fVariables[x]}`);\n                }\n            }\n        }\n    }\n\nconst ObjectGmainQL = WithGmainQL(WithMutation(WithQuery(WithFragment(WithCompose(DataCollection)))));\n\nconst gmainql = new ObjectGmainQL();\n\ngmainql.mutation`\n    mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n        createReview(episode: $ep, review: $review) {\n            stars\n            commentary\n        }\n    }\n`;\n\ngmainql.query`\n    query AllUsers (\n        $orderByUser: UserOrderBy,\n        $orderByPost: PostOrderBy\n        $orderByComment: CommentOrderBy\n    ) {\n        allUsers(orderBy: $orderByUser) {\n            id\n            name\n            ...AllPostForUser\n        }\n    }\n`;\n\ngmainql.fragment`\n    fragment AllPostForUser on User {\n        posts(orderBy: $orderByPost) {\n            id\n            title\n            ...AllCommentsForPost\n        }\n    }\n`;\n\ngmainql.fragment`\n    fragment AllCommentsForPost on Post {\n        comments (orderBy: $orderByComment) {\n            id\n            text\n        }\n    }\n`;\n\nconsole.log( gmainql.collection.query.AllUsers.compose({ orderByUser: 'hola', orderByPost: 'hola', orderByComment: 'hola' }) );\n","import Constructor from '../utils/Constructor';\nimport { CollectionModel, ComposeModel } from '../models';\n\nconst WithQuery = <TBase extends Constructor> (Base: TBase) =>\n    class Query extends Base {\n        public collection: CollectionModel;\n        protected resolveOptionName: Function;\n        protected resolveArguments: Function;\n        protected resolveVariable: Function;\n        protected RegistryFragments: Function;\n        protected compose: Function;\n        public query = (...args: any[]): void => {\n            try {\n                this.resolveArguments(args, (query: string) => {\n                    let name: string = this.resolveOptionName(\n                        query,\n                        'query',\n                        Object.keys(this.collection.query).length\n                    );\n                    let variables: string[] = this.resolveVariable(query);\n                    let fragments: string[] = this.RegistryFragments(query);\n                    let object: ComposeModel = {\n                        name,\n                        query,\n                        variables,\n                        fragments\n                    };\n                    this.collection.query[name] = {\n                        ...object,\n                        compose: this.compose(object)\n                    }\n                });\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }\n\nexport default  WithQuery;\n","import Constructor from '../utils/Constructor';\nimport { CollectionModel, ComposeModel } from '../models';\n\nconst WithMutation = <TBase extends Constructor> (Base: TBase) =>\n    class Mutation extends Base {\n        public collection: CollectionModel;\n        protected resolveOptionName: Function;\n        protected resolveArguments: Function;\n        protected resolveVariable: Function;\n        protected RegistryFragments: Function;\n        protected compose: Function;\n        public mutation = (...args: any[]): void => {\n            try {\n                this.resolveArguments(args, (query: string) => {\n                    let name: string = this.resolveOptionName(\n                        query,\n                        'mutation',\n                        Object.keys(this.collection.mutation).length\n                    );\n                    let variables: string[] = this.resolveVariable(query);\n                    let fragments: string[] = this.RegistryFragments(query);\n                    let object: ComposeModel = {\n                        name,\n                        query,\n                        variables,\n                        fragments\n                    };\n                    this.collection.mutation[name] = {\n                        ...object,\n                        compose: this.compose(object)\n                    }\n                });\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }\n\nexport default  WithMutation;\n","import Constructor from '../utils/Constructor';\nimport { CollectionModel, ComposeModel } from '../models';\n\nconst WithFragment = <TBase extends Constructor> (Base: TBase) =>\n    class Fragment extends Base {\n        public collection: CollectionModel;\n        protected resolveFragmentName: Function;\n        protected resolveArguments: Function;\n        protected resolveVariable: Function;\n        protected RegistryFragments: Function;\n        protected compose: Function;\n        public fragment = (...args: any[]): void => {\n            try {\n                this.resolveArguments(args, (query: string) => {\n                    let name: string = this.resolveFragmentName(query);\n                    let variables: string[] = this.resolveVariable(query);\n                    let fragments: string[] = this.RegistryFragments(query);\n                    let object: ComposeModel = {\n                        name,\n                        query,\n                        variables,\n                        fragments\n                    };\n                    this.collection.fragment[name] = {\n                        ...object,\n                        compose: this.compose(object)\n                    }\n                });\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }\n\nexport default  WithFragment;\n","export const RegExName: RegExp = /[a-z-A-Z_][a-z-A-Z_0-9]*/;\nexport const RegExVariable: RegExp = /[$][a-zA-Z_][a-zA-Z0-9_]*/g;\nexport const RegExOprValid: RegExp = /(query|mutation|fragment)/;\nexport const RegExFragments: RegExp = /[.][.][.][a-zA-Z_][a-zA-Z_0-9]*/gm;\n"],"sourceRoot":""}